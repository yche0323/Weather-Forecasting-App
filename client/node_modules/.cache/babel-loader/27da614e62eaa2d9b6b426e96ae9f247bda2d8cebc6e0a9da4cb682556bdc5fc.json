{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yjche\\\\JSProjects\\\\Personal\\\\weather-forecasting-app\\\\client\\\\src\\\\components\\\\SearchBar.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Select from \"react-select\";\nimport axios from \"axios\";\n\n// Define types for city data\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchBar = ({\n  onCitySelect\n}) => {\n  _s();\n  const [options, setOptions] = useState([]);\n  const [selectedCity, setSelectedCity] = useState(null);\n  const fetchCities = async input => {\n    if (input.length < 2) return;\n    try {\n      const response = await axios.get(`https://nominatim.openstreetmap.org/search`, {\n        params: {\n          q: input,\n          format: \"json\",\n          addressdetails: 1\n        }\n      });\n      const cities = response.data.map(result => ({\n        label: `${result.address.city || \"\"}, ${result.address.state || \"\"}, ${result.address.country || \"\"}`,\n        value: {\n          city: result.address.city || \"\",\n          state: result.address.state || \"\",\n          country: result.address.country || \"\",\n          lat: result.lat,\n          lon: result.lon\n        }\n      }));\n      console.log(\"Fetched cities:\", cities);\n      setOptions(cities);\n    } catch (error) {\n      console.error(\"Error fetching citites:\", error);\n    }\n  };\n  const handleChange = selectedOption => {\n    setSelectedCity(selectedOption);\n    if (selectedOption) {\n      const {\n        city,\n        state,\n        country\n      } = selectedOption.value;\n      console.log(`Selected city: ${city}, ${state}, ${country}`);\n      fetchCoordinates(city, state, country);\n    }\n  };\n  const fetchCoordinates = async (city, state, country) => {\n    try {\n      const response = await axios.get(`https://nominatim.openstreetmap.org/search`, {\n        params: {\n          q: `${city}, ${state}, ${country}`,\n          format: \"json\",\n          addressdetails: 1\n        }\n      });\n      const {\n        lat,\n        lng\n      } = response.data[0];\n      console.log(`Coordinates: Latitude ${lat}, Longitude ${lng}`);\n      onCitySelect(lat.toString(), lng.toString());\n    } catch (error) {\n      console.error(\"Error fetching coordinates:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Select, {\n    options: options,\n    onInputChange: inputValie => {\n      fetchCities(inputValue);\n    },\n    onChange: handleChange,\n    placeholder: \"Enter a city\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchBar, \"zJnldMj3LlOcO2TMCuXvlfQt2kw=\");\n_c = SearchBar;\nexport default SearchBar;\nvar _c;\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"names":["React","useState","Select","axios","jsxDEV","_jsxDEV","SearchBar","onCitySelect","_s","options","setOptions","selectedCity","setSelectedCity","fetchCities","input","length","response","get","params","q","format","addressdetails","cities","data","map","result","label","address","city","state","country","value","lat","lon","console","log","error","handleChange","selectedOption","fetchCoordinates","lng","toString","onInputChange","inputValie","inputValue","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/yjche/JSProjects/Personal/weather-forecasting-app/client/src/components/SearchBar.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Select from \"react-select\";\r\nimport axios from \"axios\";\r\n\r\n// Define types for city data\r\ninterface CityOption {\r\n  label: string;\r\n  value: { city: string; state: string; country: string };\r\n}\r\n\r\ninterface SearchBarProps {\r\n  onCitySelect: (lat: string, lng: string) => void;\r\n}\r\n\r\nconst SearchBar: React.FC<SearchBarProps> = ({ onCitySelect }) => {\r\n  const [options, setOptions] = useState<CityOption[]>([]);\r\n  const [selectedCity, setSelectedCity] = useState<CityOption | null>(null);\r\n\r\n  const fetchCities = async (input: string) => {\r\n    if (input.length < 2) return;\r\n\r\n    try {\r\n      const response = await axios.get(\r\n        `https://nominatim.openstreetmap.org/search`,\r\n        {\r\n          params: {\r\n            q: input,\r\n            format: \"json\",\r\n            addressdetails: 1,\r\n          },\r\n        }\r\n      );\r\n      const cities = response.data.map((result: any) => ({\r\n        label: `${result.address.city || \"\"}, ${result.address.state || \"\"}, ${\r\n          result.address.country || \"\"\r\n        }`,\r\n        value: {\r\n          city: result.address.city || \"\",\r\n          state: result.address.state || \"\",\r\n          country: result.address.country || \"\",\r\n          lat: result.lat,\r\n          lon: result.lon,\r\n        },\r\n      }));\r\n      console.log(\"Fetched cities:\", cities);\r\n      setOptions(cities);\r\n    } catch (error) {\r\n      console.error(\"Error fetching citites:\", error);\r\n    }\r\n  };\r\n\r\n  const handleChange = (selectedOption: CityOption | null) => {\r\n    setSelectedCity(selectedOption);\r\n    if (selectedOption) {\r\n      const { city, state, country } = selectedOption.value;\r\n      console.log(`Selected city: ${city}, ${state}, ${country}`);\r\n      fetchCoordinates(city, state, country);\r\n    }\r\n  };\r\n\r\n  const fetchCoordinates = async (\r\n    city: string,\r\n    state: string,\r\n    country: string\r\n  ) => {\r\n    try {\r\n      const response = await axios.get(\r\n        `https://nominatim.openstreetmap.org/search`,\r\n        {\r\n          params: {\r\n            q: `${city}, ${state}, ${country}`,\r\n            format: \"json\",\r\n            addressdetails: 1,\r\n          },\r\n        }\r\n      );\r\n      const { lat, lng } = response.data[0];\r\n      console.log(`Coordinates: Latitude ${lat}, Longitude ${lng}`);\r\n      onCitySelect(lat.toString(), lng.toString());\r\n    } catch (error) {\r\n      console.error(\"Error fetching coordinates:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Select\r\n      options={options}\r\n      onInputChange={(inputValie) => {\r\n        fetchCities(inputValue);\r\n      }}\r\n      onChange={handleChange}\r\n      placeholder=\"Enter a city\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}