{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yjche\\\\JSProjects\\\\Personal\\\\weather-forecasting-app\\\\client\\\\src\\\\components\\\\SearchBar.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Select from \"react-select\";\nimport axios from \"axios\";\n\n// Define types for city data\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchBar = ({\n  onCitySelect\n}) => {\n  _s();\n  const [options, setOptions] = useState([]);\n  const [selectedCity, setSelectedCity] = useState(null);\n  const fetchCities = async input => {\n    if (input.length < 2) return;\n    try {\n      const response = await axios.get(`https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(input)}.json`, {\n        params: {\n          access_token: process.env.REACT_APP_MAPBOX_ACCESS_TOKEN,\n          limit: 5,\n          types: \"place,neighbourhood\"\n        }\n      });\n      const cities = response.data.features.map(feature => {\n        var _feature$context$find, _feature$context$find2, _feature$context$find3, _feature$context$find4, _feature$context$find5, _feature$context$find6, _feature$context$find7;\n        return {\n          label: `${feature.text}${(_feature$context$find = feature.context.find(c => c.id.includes(\"neighborhood\"))) !== null && _feature$context$find !== void 0 && _feature$context$find.text ? `, ${(_feature$context$find2 = feature.context.find(c => c.id.includes(\"neighborhood\"))) === null || _feature$context$find2 === void 0 ? void 0 : _feature$context$find2.text}` : \"\"}, ${((_feature$context$find3 = feature.context.find(c => c.id.includes(\"region\"))) === null || _feature$context$find3 === void 0 ? void 0 : _feature$context$find3.text) || \"\"}, ${((_feature$context$find4 = feature.context.find(c => c.id.includes(\"country\"))) === null || _feature$context$find4 === void 0 ? void 0 : _feature$context$find4.text) || \"\"}`,\n          value: {\n            city: feature.text,\n            // Extract city name\n            state: ((_feature$context$find5 = feature.context.find(c => c.id.includes(\"region\"))) === null || _feature$context$find5 === void 0 ? void 0 : _feature$context$find5.text) || \"\",\n            // Extract state\n            country: ((_feature$context$find6 = feature.context.find(c => c.id.includes(\"country\"))) === null || _feature$context$find6 === void 0 ? void 0 : _feature$context$find6.text) || \"\",\n            // Extract country\n            lat: feature.center[1],\n            lon: feature.center[0],\n            suburb: ((_feature$context$find7 = feature.context.find(c => c.id.includes(\"neighbourhood\"))) === null || _feature$context$find7 === void 0 ? void 0 : _feature$context$find7.text) || \"\" // Extract suburb\n          }\n        };\n      });\n      console.log(\"Fetched cities,\", cities);\n      setOptions(cities);\n    } catch (error) {\n      console.error(\"Error fetching citites:\", error);\n    }\n  };\n  const handleChange = selectedOption => {\n    setSelectedCity(selectedOption);\n    if (selectedOption) {\n      const {\n        city,\n        state,\n        country\n      } = selectedOption.value;\n      console.log(`Selected city: ${city}, ${state}, ${country}`);\n      fetchCoordinates(city, state, country);\n    }\n  };\n  const fetchCoordinates = async (city, state, country) => {\n    try {\n      const query = `${city}, ${state}, ${country}`;\n      const response = await axios.get(`https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(query)}.json`, {\n        params: {\n          access_token: process.env.REACT_APP_MAPBOX_ACCESS_TOKEN,\n          limit: 1\n        }\n      });\n      const feature = response.data.features[0];\n      const {\n        center\n      } = feature;\n      const [lon, lat] = center;\n      console.log(`Coordinates: Latitude ${lat}, Longitude ${lon}`);\n      onCitySelect(lat.toString(), lon.toString());\n    } catch (error) {\n      console.error(\"Error fetching coordinates:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Select, {\n    options: options,\n    onInputChange: inputValue => {\n      fetchCities(inputValue).then(() => console.log(\"Cities updates\")).catch(error => console.log(\"Error updating cities:\", error));\n    },\n    onChange: handleChange,\n    placeholder: \"Enter a city\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchBar, \"zJnldMj3LlOcO2TMCuXvlfQt2kw=\");\n_c = SearchBar;\nexport default SearchBar;\nvar _c;\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"names":["React","useState","Select","axios","jsxDEV","_jsxDEV","SearchBar","onCitySelect","_s","options","setOptions","selectedCity","setSelectedCity","fetchCities","input","length","response","get","encodeURIComponent","params","access_token","process","env","REACT_APP_MAPBOX_ACCESS_TOKEN","limit","types","cities","data","features","map","feature","_feature$context$find","_feature$context$find2","_feature$context$find3","_feature$context$find4","_feature$context$find5","_feature$context$find6","_feature$context$find7","label","text","context","find","c","id","includes","value","city","state","country","lat","center","lon","suburb","console","log","error","handleChange","selectedOption","fetchCoordinates","query","toString","onInputChange","inputValue","then","catch","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/yjche/JSProjects/Personal/weather-forecasting-app/client/src/components/SearchBar.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Select from \"react-select\";\r\nimport axios from \"axios\";\r\n\r\n// Define types for city data\r\ninterface CityOption {\r\n  label: string;\r\n  value: {\r\n    city: string;\r\n    state: string;\r\n    country: string;\r\n    lat: number;\r\n    lon: number;\r\n    suburb?: string; // Optional suburb field\r\n  };\r\n}\r\n\r\ninterface SearchBarProps {\r\n  onCitySelect: (lat: string, lng: string) => void;\r\n}\r\n\r\nconst SearchBar: React.FC<SearchBarProps> = ({ onCitySelect }) => {\r\n  const [options, setOptions] = useState<CityOption[]>([]);\r\n  const [selectedCity, setSelectedCity] = useState<CityOption | null>(null);\r\n\r\n  const fetchCities = async (input: string) => {\r\n    if (input.length < 2) return;\r\n\r\n    try {\r\n      const response = await axios.get(\r\n        `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(\r\n          input\r\n        )}.json`,\r\n        {\r\n          params: {\r\n            access_token: process.env.REACT_APP_MAPBOX_ACCESS_TOKEN,\r\n            limit: 5,\r\n            types: \"place,neighbourhood\",\r\n          },\r\n        }\r\n      );\r\n\r\n      const cities = response.data.features.map((feature: any) => ({\r\n        label: `${feature.text}${\r\n          feature.context.find((c: any) => c.id.includes(\"neighborhood\"))?.text\r\n            ? `, ${\r\n                feature.context.find((c: any) => c.id.includes(\"neighborhood\"))\r\n                  ?.text\r\n              }`\r\n            : \"\"\r\n        }, ${\r\n          feature.context.find((c: any) => c.id.includes(\"region\"))?.text || \"\"\r\n        }, ${\r\n          feature.context.find((c: any) => c.id.includes(\"country\"))?.text || \"\"\r\n        }`,\r\n        value: {\r\n          city: feature.text, // Extract city name\r\n          state:\r\n            feature.context.find((c: any) => c.id.includes(\"region\"))?.text ||\r\n            \"\", // Extract state\r\n          country:\r\n            feature.context.find((c: any) => c.id.includes(\"country\"))?.text ||\r\n            \"\", // Extract country\r\n          lat: feature.center[1],\r\n          lon: feature.center[0],\r\n          suburb:\r\n            feature.context.find((c: any) => c.id.includes(\"neighbourhood\"))\r\n              ?.text || \"\", // Extract suburb\r\n        },\r\n      }));\r\n\r\n      console.log(\"Fetched cities,\", cities);\r\n      setOptions(cities);\r\n    } catch (error) {\r\n      console.error(\"Error fetching citites:\", error);\r\n    }\r\n  };\r\n\r\n  const handleChange = (selectedOption: CityOption | null) => {\r\n    setSelectedCity(selectedOption);\r\n    if (selectedOption) {\r\n      const { city, state, country } = selectedOption.value;\r\n      console.log(`Selected city: ${city}, ${state}, ${country}`);\r\n      fetchCoordinates(city, state, country);\r\n    }\r\n  };\r\n\r\n  const fetchCoordinates = async (\r\n    city: string,\r\n    state: string,\r\n    country: string\r\n  ) => {\r\n    try {\r\n      const query = `${city}, ${state}, ${country}`;\r\n      const response = await axios.get(\r\n        `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(\r\n          query\r\n        )}.json`,\r\n        {\r\n          params: {\r\n            access_token: process.env.REACT_APP_MAPBOX_ACCESS_TOKEN,\r\n            limit: 1,\r\n          },\r\n        }\r\n      );\r\n      const feature = response.data.features[0];\r\n      const { center } = feature;\r\n      const [lon, lat] = center;\r\n      console.log(`Coordinates: Latitude ${lat}, Longitude ${lon}`);\r\n      onCitySelect(lat.toString(), lon.toString());\r\n    } catch (error) {\r\n      console.error(\"Error fetching coordinates:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Select\r\n      options={options}\r\n      onInputChange={(inputValue) => {\r\n        fetchCities(inputValue)\r\n          .then(() => console.log(\"Cities updates\"))\r\n          .catch((error) => console.log(\"Error updating cities:\", error));\r\n      }}\r\n      onChange={handleChange}\r\n      placeholder=\"Enter a city\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}