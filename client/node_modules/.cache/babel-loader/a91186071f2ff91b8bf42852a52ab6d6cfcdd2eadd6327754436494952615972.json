{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yjche\\\\JSProjects\\\\Personal\\\\weather-forecasting-app\\\\client\\\\src\\\\components\\\\LocationButton.tsx\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport \"../images/location-button.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LocationButton = ({\n  onCitySelect\n}) => {\n  const handleGetLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(async position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        try {\n          const fetchedPlaceName = await fetchPlaceName(latitude, longitude);\n          if (fetchedPlaceName) {\n            onCitySelect(latitude.toString(), longitude.toString(), fetchedPlaceName);\n          } else {\n            console.error(\"Location not found\");\n          }\n        } catch (error) {\n          console.error(\"Error getting location:\", error);\n        }\n      }, error => {\n        console.error(\"Error getting location:\", error);\n      });\n    } else {\n      console.error(\"Geolocation not supported by this browser.\");\n    }\n  };\n  const fetchPlaceName = async (lat, lng) => {\n    try {\n      var _response$data$featur;\n      const response = await axios.get(`https://api.mapbox.com/geocoding/v5/mapbox.places/${lng},${lat}.json`, {\n        params: {\n          access_token: process.env.REACT_APP_MAPBOX_ACCESS_TOKEN,\n          limit: 1\n        }\n      });\n      const features = ((_response$data$featur = response.data.features[0]) === null || _response$data$featur === void 0 ? void 0 : _response$data$featur.context) || [];\n      let city = \"\";\n      let country = \"\";\n      for (const feature of features) {\n        if (feature.id.includes(\"place\")) {\n          city = feature.text;\n        } else if (feature.id.includes(\"country\")) {\n          country = feature.text;\n        }\n      }\n      if (city && country) {\n        return `${city}, ${country}`;\n      } else {\n        return null;\n      }\n    } catch (error) {\n      console.error(\"Error while fetching place name:\", error);\n      return null;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"location-button\",\n      onClick: handleGetLocation,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_c = LocationButton;\nexport default LocationButton;\nvar _c;\n$RefreshReg$(_c, \"LocationButton\");","map":{"version":3,"names":["React","axios","jsxDEV","_jsxDEV","LocationButton","onCitySelect","handleGetLocation","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","fetchedPlaceName","fetchPlaceName","toString","console","error","lat","lng","_response$data$featur","response","get","params","access_token","process","env","REACT_APP_MAPBOX_ACCESS_TOKEN","limit","features","data","context","city","country","feature","id","includes","text","children","className","onClick","src","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/yjche/JSProjects/Personal/weather-forecasting-app/client/src/components/LocationButton.tsx"],"sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport \"../images/location-button.svg\";\r\n\r\ninterface LocationButtonProps {\r\n  onCitySelect: (lat: string, lng: string, loc: string) => void;\r\n}\r\n\r\nconst LocationButton: React.FC<LocationButtonProps> = ({ onCitySelect }) => {\r\n  const handleGetLocation = () => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        async (position) => {\r\n          const { latitude, longitude } = position.coords;\r\n          try {\r\n            const fetchedPlaceName = await fetchPlaceName(latitude, longitude);\r\n            if (fetchedPlaceName) {\r\n              onCitySelect(\r\n                latitude.toString(),\r\n                longitude.toString(),\r\n                fetchedPlaceName\r\n              );\r\n            } else {\r\n              console.error(\"Location not found\");\r\n            }\r\n          } catch (error) {\r\n            console.error(\"Error getting location:\", error);\r\n          }\r\n        },\r\n        (error) => {\r\n          console.error(\"Error getting location:\", error);\r\n        }\r\n      );\r\n    } else {\r\n      console.error(\"Geolocation not supported by this browser.\");\r\n    }\r\n  };\r\n\r\n  const fetchPlaceName = async (\r\n    lat: number,\r\n    lng: number\r\n  ): Promise<string | null> => {\r\n    try {\r\n      const response = await axios.get(\r\n        `https://api.mapbox.com/geocoding/v5/mapbox.places/${lng},${lat}.json`,\r\n        {\r\n          params: {\r\n            access_token: process.env.REACT_APP_MAPBOX_ACCESS_TOKEN,\r\n            limit: 1,\r\n          },\r\n        }\r\n      );\r\n\r\n      const features = response.data.features[0]?.context || [];\r\n      let city = \"\";\r\n      let country = \"\";\r\n\r\n      for (const feature of features) {\r\n        if (feature.id.includes(\"place\")) {\r\n          city = feature.text;\r\n        } else if (feature.id.includes(\"country\")) {\r\n          country = feature.text;\r\n        }\r\n      }\r\n\r\n      if (city && country) {\r\n        return `${city}, ${country}`;\r\n      } else {\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error while fetching place name:\", error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button className=\"location-button\" onClick={handleGetLocation}>\r\n        <img src=\"\" />\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LocationButton;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}