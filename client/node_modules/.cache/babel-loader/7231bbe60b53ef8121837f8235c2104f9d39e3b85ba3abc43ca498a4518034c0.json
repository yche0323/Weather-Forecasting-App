{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yjche\\\\JSProjects\\\\Personal\\\\weather-forecasting-app\\\\client\\\\src\\\\components\\\\SearchBar.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Select from \"react-select\";\nimport axios from \"axios\";\n\n// Define types for city data\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchBar = ({\n  onCitySelect\n}) => {\n  _s();\n  const [options, setOptions] = useState([]);\n  const [selectedCity, setSelectedCity] = useState(null);\n  useEffect(() => {});\n  const fetchCities = async input => {\n    if (input.length < 2) return;\n    console.log(input);\n    try {\n      const response = await axios.get(`https://api.opencagedata.com/geocode/v1/json`, {\n        params: {\n          q: input,\n          key: process.env.REACT_APP_OPENCAGE_API_KEY\n        }\n      });\n      const cities = response.data.results.map(result => ({\n        label: `${result.components.city}, ${result.components.state}, ${result.components.country}`,\n        value: {\n          city: result.components.city,\n          state: result.components.state,\n          country: result.components.country\n        }\n      }));\n      setOptions(cities);\n    } catch (error) {\n      console.error(\"Error fetching citites:\", error);\n    }\n  };\n  const handleChange = selectedOption => {\n    setSelectedCity(selectedOption);\n    if (selectedOption) {\n      const {\n        city,\n        state,\n        country\n      } = selectedOption.value;\n      console.log(`Selected city: ${city}, ${state}, ${country}`);\n      fetchCoordinates(city, state, country);\n    }\n  };\n  const fetchCoordinates = async (city, state, country) => {\n    try {\n      const response = await axios.get(`https://api.opencagedata.com/geocode/v1/json`, {\n        params: {\n          q: `${city}, ${state}, ${country}`,\n          key: process.env.REACT_APP_OPENCAGE_API_KEY\n        }\n      });\n      const {\n        lat,\n        lng\n      } = response.data.results[0].geometry;\n      console.log(`Coordinates: Latitude ${lat}, Longitude ${lng}`);\n      onCitySelect(lat.toString(), lng.toString());\n    } catch (error) {\n      console.error(\"Error fetching coordinates:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Select, {\n    options: options,\n    onInputChange: fetchCities,\n    onChange: handleChange,\n    placeholder: \"Enter a city\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchBar, \"7jE4BsTRNfgbsMSveQHALN0C7Kk=\");\n_c = SearchBar;\nexport default SearchBar;\nvar _c;\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"names":["React","useState","useEffect","Select","axios","jsxDEV","_jsxDEV","SearchBar","onCitySelect","_s","options","setOptions","selectedCity","setSelectedCity","fetchCities","input","length","console","log","response","get","params","q","key","process","env","REACT_APP_OPENCAGE_API_KEY","cities","data","results","map","result","label","components","city","state","country","value","error","handleChange","selectedOption","fetchCoordinates","lat","lng","geometry","toString","onInputChange","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/yjche/JSProjects/Personal/weather-forecasting-app/client/src/components/SearchBar.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Select from \"react-select\";\r\nimport axios from \"axios\";\r\n\r\n// Define types for city data\r\ninterface CityOption {\r\n  label: string;\r\n  value: { city: string; state: string; country: string };\r\n}\r\n\r\ninterface SearchBarProps {\r\n  onCitySelect: (lat: string, lng: string) => void;\r\n}\r\n\r\nconst SearchBar: React.FC<SearchBarProps> = ({ onCitySelect }) => {\r\n  const [options, setOptions] = useState<CityOption[]>([]);\r\n  const [selectedCity, setSelectedCity] = useState<CityOption | null>(null);\r\n\r\n  useEffect(() => {});\r\n\r\n  const fetchCities = async (input: string) => {\r\n    if (input.length < 2) return;\r\n\r\n    console.log(input);\r\n\r\n    try {\r\n      const response = await axios.get(\r\n        `https://api.opencagedata.com/geocode/v1/json`,\r\n        {\r\n          params: {\r\n            q: input,\r\n            key: process.env.REACT_APP_OPENCAGE_API_KEY,\r\n          },\r\n        }\r\n      );\r\n      const cities = response.data.results.map((result: any) => ({\r\n        label: `${result.components.city}, ${result.components.state}, ${result.components.country}`,\r\n        value: {\r\n          city: result.components.city,\r\n          state: result.components.state,\r\n          country: result.components.country,\r\n        },\r\n      }));\r\n      setOptions(cities);\r\n    } catch (error) {\r\n      console.error(\"Error fetching citites:\", error);\r\n    }\r\n  };\r\n\r\n  const handleChange = (selectedOption: CityOption | null) => {\r\n    setSelectedCity(selectedOption);\r\n    if (selectedOption) {\r\n      const { city, state, country } = selectedOption.value;\r\n      console.log(`Selected city: ${city}, ${state}, ${country}`);\r\n      fetchCoordinates(city, state, country);\r\n    }\r\n  };\r\n\r\n  const fetchCoordinates = async (\r\n    city: string,\r\n    state: string,\r\n    country: string\r\n  ) => {\r\n    try {\r\n      const response = await axios.get(\r\n        `https://api.opencagedata.com/geocode/v1/json`,\r\n        {\r\n          params: {\r\n            q: `${city}, ${state}, ${country}`,\r\n            key: process.env.REACT_APP_OPENCAGE_API_KEY,\r\n          },\r\n        }\r\n      );\r\n      const { lat, lng } = response.data.results[0].geometry;\r\n      console.log(`Coordinates: Latitude ${lat}, Longitude ${lng}`);\r\n      onCitySelect(lat.toString(), lng.toString());\r\n    } catch (error) {\r\n      console.error(\"Error fetching coordinates:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Select\r\n      options={options}\r\n      onInputChange={fetchCities}\r\n      onChange={handleChange}\r\n      placeholder=\"Enter a city\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}