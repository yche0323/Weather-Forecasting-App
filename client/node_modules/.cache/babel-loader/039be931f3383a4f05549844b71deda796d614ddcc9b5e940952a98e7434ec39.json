{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yjche\\\\JSProjects\\\\Personal\\\\weather-forecasting-app\\\\client\\\\src\\\\components\\\\SearchBar.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Select from \"react-select\";\nimport axios from \"axios\";\n\n// Define types for city data\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchBar = ({\n  onCitySelect\n}) => {\n  _s();\n  const [options, setOptions] = useState([]);\n  const [selectedCity, setSelectedCity] = useState(null);\n  const fetchCities = async input => {\n    if (input.length < 2) return;\n    try {\n      const response = await axios.get(`https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(input)}.json`, {\n        params: {\n          access_token: process.env.MAPBOX_ACCESS_TOKEN,\n          limit: 5,\n          types: \"place\"\n        }\n      });\n      const cities = setOptions(cities);\n    } catch (error) {\n      console.error(\"Error fetching citites:\", error);\n    }\n  };\n  const handleChange = selectedOption => {\n    setSelectedCity(selectedOption);\n    if (selectedOption) {\n      const {\n        city,\n        state,\n        country\n      } = selectedOption.value;\n      console.log(`Selected city: ${city}, ${state}, ${country}`);\n      fetchCoordinates(city, state, country);\n    }\n  };\n  const fetchCoordinates = async (city, state, country) => {\n    try {\n      const response = await axios.get(`https://nominatim.openstreetmap.org/search`, {\n        params: {\n          q: `${city}, ${state}, ${country}`,\n          format: \"json\",\n          addressdetails: 1\n        }\n      });\n      const {\n        lat,\n        lon\n      } = response.data[0];\n      console.log(`Coordinates: Latitude ${lat}, Longitude ${lon}`);\n      onCitySelect(lat.toString(), lon.toString());\n    } catch (error) {\n      console.error(\"Error fetching coordinates:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Select, {\n    options: options,\n    onInputChange: inputValue => {\n      fetchCities(inputValue).then(() => console.log(\"Cities updates\")).catch(error => console.log(\"Error updating cities:\", error));\n    },\n    onChange: handleChange,\n    placeholder: \"Enter a city\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchBar, \"zJnldMj3LlOcO2TMCuXvlfQt2kw=\");\n_c = SearchBar;\nexport default SearchBar;\nvar _c;\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"names":["React","useState","Select","axios","jsxDEV","_jsxDEV","SearchBar","onCitySelect","_s","options","setOptions","selectedCity","setSelectedCity","fetchCities","input","length","response","get","encodeURIComponent","params","access_token","process","env","MAPBOX_ACCESS_TOKEN","limit","types","cities","error","console","handleChange","selectedOption","city","state","country","value","log","fetchCoordinates","q","format","addressdetails","lat","lon","data","toString","onInputChange","inputValue","then","catch","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/yjche/JSProjects/Personal/weather-forecasting-app/client/src/components/SearchBar.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Select from \"react-select\";\r\nimport axios from \"axios\";\r\n\r\n// Define types for city data\r\ninterface CityOption {\r\n  label: string;\r\n  value: { city: string; state: string; country: string };\r\n}\r\n\r\ninterface SearchBarProps {\r\n  onCitySelect: (lat: string, lng: string) => void;\r\n}\r\n\r\nconst SearchBar: React.FC<SearchBarProps> = ({ onCitySelect }) => {\r\n  const [options, setOptions] = useState<CityOption[]>([]);\r\n  const [selectedCity, setSelectedCity] = useState<CityOption | null>(null);\r\n\r\n  const fetchCities = async (input: string) => {\r\n    if (input.length < 2) return;\r\n\r\n    try {\r\n      const response = await axios.get(\r\n        `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(\r\n          input\r\n        )}.json`,\r\n        {\r\n          params: {\r\n            access_token: process.env.MAPBOX_ACCESS_TOKEN,\r\n            limit: 5,\r\n            types: \"place\",\r\n          },\r\n        }\r\n      );\r\n      const cities = setOptions(cities);\r\n    } catch (error) {\r\n      console.error(\"Error fetching citites:\", error);\r\n    }\r\n  };\r\n\r\n  const handleChange = (selectedOption: CityOption | null) => {\r\n    setSelectedCity(selectedOption);\r\n    if (selectedOption) {\r\n      const { city, state, country } = selectedOption.value;\r\n      console.log(`Selected city: ${city}, ${state}, ${country}`);\r\n      fetchCoordinates(city, state, country);\r\n    }\r\n  };\r\n\r\n  const fetchCoordinates = async (\r\n    city: string,\r\n    state: string,\r\n    country: string\r\n  ) => {\r\n    try {\r\n      const response = await axios.get(\r\n        `https://nominatim.openstreetmap.org/search`,\r\n        {\r\n          params: {\r\n            q: `${city}, ${state}, ${country}`,\r\n            format: \"json\",\r\n            addressdetails: 1,\r\n          },\r\n        }\r\n      );\r\n      const { lat, lon } = response.data[0];\r\n      console.log(`Coordinates: Latitude ${lat}, Longitude ${lon}`);\r\n      onCitySelect(lat.toString(), lon.toString());\r\n    } catch (error) {\r\n      console.error(\"Error fetching coordinates:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Select\r\n      options={options}\r\n      onInputChange={(inputValue) => {\r\n        fetchCities(inputValue)\r\n          .then(() => console.log(\"Cities updates\"))\r\n          .catch((error) => console.log(\"Error updating cities:\", error));\r\n      }}\r\n      onChange={handleChange}\r\n      placeholder=\"Enter a city\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}